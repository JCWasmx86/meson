# Legal stuff
# Legal stuff

# Legal stuff
# Legal stuff

# Foo123

foo = [
    'foo', # Foo456,
    'abc'.strip(), # FOOOOO
]

if true
    # Foo

    # Bar
    # Baz
    # Baz2
    # Baz3
    warning() # Foo
    # Foo1234
endif

bar()
foo() # Foo12345

# From mesa
if with_platform_x11
    c_args += [
        '-DVK_USE_PLATFORM_XCB_KHR',
        '-DVK_USE_PLATFORM_XLIB_KHR',
    ]
    #add this once aco and other places can build with it1
    #cpp_args += ['-DVK_USE_PLATFORM_XCB_KHR', '-DVK_USE_PLATFORM_XLIB_KHR']
endif

# Disable deprecated keyword warnings, since we have to use them for
# old-bison compat.  See discussion in
# https://gitlab.freedesktop.org/mesa/mesa/merge_requests/2161
if find_program('bison',
    required: false,
    version: '> 2.3',
).found()
    prog_bison = [
        prog_bison,
        '-Wno-deprecated',
    ]
endif

foo.bar('ABC', true) # Do stuff
bar('ABC', true) # Do stuff 2
x = (((y + 5) + 1) + 2) # Do stuff 3
x = 'Foo' # Foo

# Foo
# BarBaz
# Postcomments

# From mesa
rusticl_gen_args = [
    # can't do anything about it anyway
    '-Aclippy::all',
]

libclc_compiler = shared_library('clon12compiler', [files_libclc_compiler, sha1_h],
    vs_module_defs: 'clon12compiler.def',
    include_directories: [
        inc_include,
    ],
    dependencies: [
        idep_clc,
        idep_nir_headers,
    ],
    name_prefix: '', # otherwise mingw will create libclon12compiler.dll
)
pgmdump2 = executable('pgmdump2', 'pgmdump2.c',
    include_directories: [
        inc_freedreno,
        inc_include,
        inc_src,
    ],
    gnu_symbol_visibility: 'hidden',
    dependencies: [],
    link_with: [
        libfreedreno_cffdec,
        libfreedreno_io,
        libfreedreno_ir2, # for disasm_a2xx
        libfreedreno_ir3, # for disasm_a3xx
    ],
    build_by_default: with_tools.contains('freedreno'),
    install: false,
)

grl_grl_files = [
    'gpu/build_leaf.grl',
    'gpu/build_primref.grl',
    # 'gpu/build_refit.grl',
    'gpu/copy.grl',
    # 'gpu/grl_api_interface_verify.grl',
    'gpu/misc.grl',
    # 'gpu/morton_builder.grl',
    # 'gpu/msb_radix_bitonic_sort.grl',
    'gpu/new_sah_builder.grl',
    'gpu/postbuild_info.grl',
    # 'gpu/presplit.grl',
    # 'gpu/radix_sort.grl',
    # 'gpu/rebraid.grl',
    # 'gpu/traversal_shader.grl',
]

if with_dri2
    files_gbm += files('backends/dri/gbm_dri.c', 'backends/dri/gbm_driint.h')
    deps_gbm += dep_libdrm # TODO: pthread-stubs
endif

sha1_h = custom_target('git_sha1.h',
    output: 'git_sha1.h',
    command: [
        prog_python,
        git_sha1_gen_py,
        '--output',
        '@OUTPUT@',
    ],
    build_by_default: true,
    build_always_stale: true, # commit sha1 can change without having touched these files
)

# From systemd
efi_arch = {
    # host_cc_arch: [efi_arch (see Table 3-2 in UEFI spec), gnu_efi_inc_arch]
    'x86': ['ia32', 'ia32'],
    'x86_64': ['x64', 'x86_64'],
    'arm': ['arm', 'arm'],
    'aarch64': ['aa64', 'aarch64'],
    'riscv64': ['riscv64', 'riscv64']
}.get(efi_arch, [])

# From GNOME-Builder
add_global_arguments([
        '-DHAVE_CONFIG_H',
        '-I' + meson.project_build_root(), # config.h
        '-D_GNU_SOURCE',
        '-DIDE_COMPILATION',
    ], language: 'c')

x = [
    '-DHAVE_CONFIG_H',
    '-I' + meson.project_build_root(), # config.h
    '-D_GNU_SOURCE',
    '-DIDE_COMPILATION',
]

